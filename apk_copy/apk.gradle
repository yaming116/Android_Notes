def storeDir = System.getenv("STORE_ROOT") //配置文件存储路径
def os = System.getProperty("os.name")     // 系统类型
def apkDir = System.getenv("APK_DIR")     // 打包出来apk存储的地方
def isJenkins = "true".equals(System.getenv("IS_JENKINS")) //是否是打包机
def projectRootName = project.rootProject.name

println "version: 5"

if (isJenkins && (storeDir == null || apkDir == null)){
    if (storeDir == null){
        throw new NullPointerException('storeDir is null, you need add it in system env ' +
                'with key: STORE_ROOT')
    }
    if (apkDir == null){
        throw new NullPointerException('apkDir is null, you need add it in system env ' +
                'with key: APK_DIR')
    }
}

project.ext{
    projectName = projectRootName
    apkName = projectName + ".apk"
    apkRootDir = null
    outputPath = null
    sourceApk = null
    sourceApkName = null
}

if (isJenkins){
    project.ext.apkRootDir = apkDir
    storeDir = storeDir  + project.ext.projectName + "/"
}else {
    storeDir = ''
}

/**
 * 默认打包完把apk存储的目录
 * win ：d:/
 * mac ：/Download
 * linux ： /opt
 */

if (project.ext.apkRootDir == null){
    if (os == null || os.indexOf('windows')){
        project.ext.apkRootDir = 'd:/'
    }else if (os.indexOf('linux') > 0){
        project.ext.apkRootDir = '/opt'
    }else if (os.indexOf('windows')){
        project.ext.apkRootDir = '/Download'
    }
}


def configPath = storeDir + "/apk.properties"
println "config path: " + configPath

File propFile = file(isJenkins ?  configPath : 'apk.properties');
if (propFile.exists()) {
    def Properties props = new Properties()
    props.load(new FileInputStream(propFile))
    if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {

        android.signingConfigs.release.storeFile = file(storeDir + props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']

        project.ext.apkName = props['APK_NAME']
        if (hasProperty('PROJECT_NAME')){
            project.ext.projectName = PROJECT_NAME
        }

        println "apkName: " + project.ext.apkName
        println "apk store dir: " + project.ext.apkRootDir
        println "projectName: " + project.ext.projectName
    } else {
        throw new IllegalArgumentException('invalid args in apk.properties')
    }
} else {
    println "apk.properties not exist"
    if (isJenkins){
        throw new FileNotFoundException("File not found at: " + configPath)
    }else{
        android.buildTypes.release.signingConfig = null
    }
}


def buildDay = new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("GMT+8"))
def buildTime = new Date().format("yyyy-MM-dd HH.mm.ss", TimeZone.getTimeZone("GMT+8"))


android.applicationVariants.all { variant ->
    if (variant.buildType.name == 'release') {
        variant.outputs.each { output ->
            project.ext.sourceApk = output.outputFile.getAbsolutePath();
            project.ext.sourceApkName = output.outputFile.getName()
        }
    }
}

task publishRelease(dependsOn: 'assembleRelease') {
    doLast{
        //构建最新的，固定位置，方便拷贝
        def onlyApkDir = project.ext.apkRootDir  ;
        def onlyApk = onlyApkDir + project.ext.projectName + ".apk";
        //每日保存最新的一个
        def dayApkDir = project.ext.apkRootDir + buildDay + "/";
        def dayApk = dayApkDir + project.ext.projectName + ".apk";
        //保留每次打包的apk
        def timesApkDir = project.ext.apkRootDir + buildDay + "/" + project.ext.projectName + "/";

        def srcApk = project.ext.sourceApk
        def srcName = project.ext.sourceApkName
        println "onlyApk: " + onlyApk
        println "dayApk: " +  dayApk
        //clean
        def File dk = new File(dayApk)
        if (dk.exists()){
            dk.delete()
        }

        def File ok = new File(onlyApk)
        if (ok.exists()){
            ok.delete()
        }

        println "onlyApk status: " + ok.exists()

        copy{
            from srcApk
            into onlyApkDir
            rename srcName, project.ext.apkName
        }

        copy{
            from srcApk
            into dayApkDir
            rename srcName, project.ext.apkName
        }

        copy{
            from srcApk
            into timesApkDir
            rename srcName, buildTime + ".apk"
        }
    }
}

